// Code generated by MockGen. DO NOT EDIT.
// Source: practice-run/handler (interfaces: ChatService)
//
// Generated by this command:
//
//	mockgen -destination mocks/chat_service_mock.go -package mocks . ChatService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	room "practice-run/room"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
	isgomock struct{}
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// AddMemberToRoom mocks base method.
func (m *MockChatService) AddMemberToRoom(ctx context.Context, roomName string, member room.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberToRoom", ctx, roomName, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberToRoom indicates an expected call of AddMemberToRoom.
func (mr *MockChatServiceMockRecorder) AddMemberToRoom(ctx, roomName, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberToRoom", reflect.TypeOf((*MockChatService)(nil).AddMemberToRoom), ctx, roomName, member)
}

// RemoveMemberFromRoom mocks base method.
func (m *MockChatService) RemoveMemberFromRoom(ctx context.Context, roomName string, member room.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemberFromRoom", ctx, roomName, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemberFromRoom indicates an expected call of RemoveMemberFromRoom.
func (mr *MockChatServiceMockRecorder) RemoveMemberFromRoom(ctx, roomName, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemberFromRoom", reflect.TypeOf((*MockChatService)(nil).RemoveMemberFromRoom), ctx, roomName, member)
}

// SendMessageToRoom mocks base method.
func (m *MockChatService) SendMessageToRoom(ctx context.Context, roomName string, member room.Member, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToRoom", ctx, roomName, member, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageToRoom indicates an expected call of SendMessageToRoom.
func (mr *MockChatServiceMockRecorder) SendMessageToRoom(ctx, roomName, member, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToRoom", reflect.TypeOf((*MockChatService)(nil).SendMessageToRoom), ctx, roomName, member, message)
}

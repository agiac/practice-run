// Code generated by MockGen. DO NOT EDIT.
// Source: practice-run/chat (interfaces: RoomService)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_room_service.go -package=mocks . RoomService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	room "practice-run/room"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRoomService is a mock of RoomService interface.
type MockRoomService struct {
	ctrl     *gomock.Controller
	recorder *MockRoomServiceMockRecorder
	isgomock struct{}
}

// MockRoomServiceMockRecorder is the mock recorder for MockRoomService.
type MockRoomServiceMockRecorder struct {
	mock *MockRoomService
}

// NewMockRoomService creates a new mock instance.
func NewMockRoomService(ctrl *gomock.Controller) *MockRoomService {
	mock := &MockRoomService{ctrl: ctrl}
	mock.recorder = &MockRoomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomService) EXPECT() *MockRoomServiceMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m_2 *MockRoomService) AddMember(ctx context.Context, r *room.Room, m room.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddMember", ctx, r, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockRoomServiceMockRecorder) AddMember(ctx, r, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockRoomService)(nil).AddMember), ctx, r, m)
}

// CreateRoom mocks base method.
func (m *MockRoomService) CreateRoom(ctx context.Context, roomName string) (*room.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, roomName)
	ret0, _ := ret[0].(*room.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomServiceMockRecorder) CreateRoom(ctx, roomName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomService)(nil).CreateRoom), ctx, roomName)
}

// RemoveMember mocks base method.
func (m_2 *MockRoomService) RemoveMember(ctx context.Context, r *room.Room, m room.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RemoveMember", ctx, r, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockRoomServiceMockRecorder) RemoveMember(ctx, r, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockRoomService)(nil).RemoveMember), ctx, r, m)
}

// SendMessage mocks base method.
func (m_2 *MockRoomService) SendMessage(ctx context.Context, r *room.Room, m room.Member, message string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMessage", ctx, r, m, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockRoomServiceMockRecorder) SendMessage(ctx, r, m, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRoomService)(nil).SendMessage), ctx, r, m, message)
}

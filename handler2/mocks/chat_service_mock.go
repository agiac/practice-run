// Code generated by MockGen. DO NOT EDIT.
// Source: practice-run/handler2 (interfaces: chatService)
//
// Generated by this command:
//
//	mockgen -destination mocks/chat_service_mock.go -mock_names chatService=ChatService -package mocks . chatService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	room2 "practice-run/room2"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// ChatService is a mock of chatService interface.
type ChatService struct {
	ctrl     *gomock.Controller
	recorder *ChatServiceMockRecorder
	isgomock struct{}
}

// ChatServiceMockRecorder is the mock recorder for ChatService.
type ChatServiceMockRecorder struct {
	mock *ChatService
}

// NewChatService creates a new mock instance.
func NewChatService(ctrl *gomock.Controller) *ChatService {
	mock := &ChatService{ctrl: ctrl}
	mock.recorder = &ChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ChatService) EXPECT() *ChatServiceMockRecorder {
	return m.recorder
}

// AddMemberToRoom mocks base method.
func (m *ChatService) AddMemberToRoom(ctx context.Context, roomName string, member room2.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberToRoom", ctx, roomName, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberToRoom indicates an expected call of AddMemberToRoom.
func (mr *ChatServiceMockRecorder) AddMemberToRoom(ctx, roomName, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberToRoom", reflect.TypeOf((*ChatService)(nil).AddMemberToRoom), ctx, roomName, member)
}

// RemoveMemberFromRoom mocks base method.
func (m *ChatService) RemoveMemberFromRoom(ctx context.Context, roomName string, member room2.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemberFromRoom", ctx, roomName, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemberFromRoom indicates an expected call of RemoveMemberFromRoom.
func (mr *ChatServiceMockRecorder) RemoveMemberFromRoom(ctx, roomName, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemberFromRoom", reflect.TypeOf((*ChatService)(nil).RemoveMemberFromRoom), ctx, roomName, member)
}

// SendMessageToRoom mocks base method.
func (m *ChatService) SendMessageToRoom(ctx context.Context, roomName string, member room2.Member, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToRoom", ctx, roomName, member, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageToRoom indicates an expected call of SendMessageToRoom.
func (mr *ChatServiceMockRecorder) SendMessageToRoom(ctx, roomName, member, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToRoom", reflect.TypeOf((*ChatService)(nil).SendMessageToRoom), ctx, roomName, member, message)
}

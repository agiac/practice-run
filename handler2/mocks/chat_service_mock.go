// Code generated by MockGen. DO NOT EDIT.
// Source: practice-run/handler2 (interfaces: ChatService)
//
// Generated by this command:
//
//	mockgen -destination mocks/chat_service_mock.go -package mocks . ChatService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
	isgomock struct{}
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// JoinChannel mocks base method.
func (m *MockChatService) JoinChannel(ctx context.Context, username, channelName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChannel", ctx, username, channelName)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChannel indicates an expected call of JoinChannel.
func (mr *MockChatServiceMockRecorder) JoinChannel(ctx, username, channelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChannel", reflect.TypeOf((*MockChatService)(nil).JoinChannel), ctx, username, channelName)
}

// LeaveChannel mocks base method.
func (m *MockChatService) LeaveChannel(ctx context.Context, username, channelName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChannel", ctx, username, channelName)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveChannel indicates an expected call of LeaveChannel.
func (mr *MockChatServiceMockRecorder) LeaveChannel(ctx, username, channelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChannel", reflect.TypeOf((*MockChatService)(nil).LeaveChannel), ctx, username, channelName)
}

// ListChannelUsers mocks base method.
func (m *MockChatService) ListChannelUsers(ctx context.Context, channelName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelUsers", ctx, channelName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelUsers indicates an expected call of ListChannelUsers.
func (mr *MockChatServiceMockRecorder) ListChannelUsers(ctx, channelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelUsers", reflect.TypeOf((*MockChatService)(nil).ListChannelUsers), ctx, channelName)
}

// ListChannels mocks base method.
func (m *MockChatService) ListChannels(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels.
func (mr *MockChatServiceMockRecorder) ListChannels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockChatService)(nil).ListChannels), ctx)
}

// SendDirectMessage mocks base method.
func (m *MockChatService) SendDirectMessage(ctx context.Context, sender, recipient, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDirectMessage", ctx, sender, recipient, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDirectMessage indicates an expected call of SendDirectMessage.
func (mr *MockChatServiceMockRecorder) SendDirectMessage(ctx, sender, recipient, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectMessage", reflect.TypeOf((*MockChatService)(nil).SendDirectMessage), ctx, sender, recipient, message)
}

// SendMessage mocks base method.
func (m *MockChatService) SendMessage(ctx context.Context, username, channelName, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, username, channelName, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatServiceMockRecorder) SendMessage(ctx, username, channelName, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatService)(nil).SendMessage), ctx, username, channelName, message)
}

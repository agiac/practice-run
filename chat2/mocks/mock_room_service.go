// Code generated by MockGen. DO NOT EDIT.
// Source: practice-run/chat2 (interfaces: roomRepository)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_room_service.go -mock_names roomRepository=RoomRepository -package=mocks . roomRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	room2 "practice-run/room2"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// RoomRepository is a mock of roomRepository interface.
type RoomRepository struct {
	ctrl     *gomock.Controller
	recorder *RoomRepositoryMockRecorder
	isgomock struct{}
}

// RoomRepositoryMockRecorder is the mock recorder for RoomRepository.
type RoomRepositoryMockRecorder struct {
	mock *RoomRepository
}

// NewRoomRepository creates a new mock instance.
func NewRoomRepository(ctrl *gomock.Controller) *RoomRepository {
	mock := &RoomRepository{ctrl: ctrl}
	mock.recorder = &RoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RoomRepository) EXPECT() *RoomRepositoryMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *RoomRepository) CreateRoom(ctx context.Context, roomName string) (*room2.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, roomName)
	ret0, _ := ret[0].(*room2.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *RoomRepositoryMockRecorder) CreateRoom(ctx, roomName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*RoomRepository)(nil).CreateRoom), ctx, roomName)
}

// GetRoom mocks base method.
func (m *RoomRepository) GetRoom(ctx context.Context, roomName string) (*room2.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", ctx, roomName)
	ret0, _ := ret[0].(*room2.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *RoomRepositoryMockRecorder) GetRoom(ctx, roomName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*RoomRepository)(nil).GetRoom), ctx, roomName)
}

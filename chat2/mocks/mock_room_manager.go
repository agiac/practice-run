// Code generated by MockGen. DO NOT EDIT.
// Source: practice-run/chat2 (interfaces: roomManager)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_room_manager.go -mock_names roomManager=RoomManager -package=mocks . roomManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	room2 "practice-run/room2"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// RoomManager is a mock of roomManager interface.
type RoomManager struct {
	ctrl     *gomock.Controller
	recorder *RoomManagerMockRecorder
	isgomock struct{}
}

// RoomManagerMockRecorder is the mock recorder for RoomManager.
type RoomManagerMockRecorder struct {
	mock *RoomManager
}

// NewRoomManager creates a new mock instance.
func NewRoomManager(ctrl *gomock.Controller) *RoomManager {
	mock := &RoomManager{ctrl: ctrl}
	mock.recorder = &RoomManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RoomManager) EXPECT() *RoomManagerMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m_2 *RoomManager) AddMember(ctx context.Context, r *room2.Room, m room2.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddMember", ctx, r, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *RoomManagerMockRecorder) AddMember(ctx, r, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*RoomManager)(nil).AddMember), ctx, r, m)
}

// RemoveMember mocks base method.
func (m_2 *RoomManager) RemoveMember(ctx context.Context, r *room2.Room, m room2.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RemoveMember", ctx, r, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *RoomManagerMockRecorder) RemoveMember(ctx, r, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*RoomManager)(nil).RemoveMember), ctx, r, m)
}

// SendMessage mocks base method.
func (m_2 *RoomManager) SendMessage(ctx context.Context, r *room2.Room, m room2.Member, message string) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMessage", ctx, r, m, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *RoomManagerMockRecorder) SendMessage(ctx, r, m, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*RoomManager)(nil).SendMessage), ctx, r, m, message)
}
